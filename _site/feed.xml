<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-21T20:38:16+09:00</updated><id>http://localhost:4000/</id><title type="html">William Dawson Github</title><subtitle>An overview of my projects on github, and updates on my current work.</subtitle><entry><title type="html">Hotelling’s Method</title><link href="http://localhost:4000/blog/method/2017/08/21/hotelling.html" rel="alternate" type="text/html" title="Hotelling's Method" /><published>2017-08-21T11:00:00+09:00</published><updated>2017-08-21T11:00:00+09:00</updated><id>http://localhost:4000/blog/method/2017/08/21/hotelling</id><content type="html" xml:base="http://localhost:4000/blog/method/2017/08/21/hotelling.html">&lt;p&gt;I would like to use this first blog post to introduce Hotelling’s method
for computing the inverse of a matrix. We’ll focus on the symmetric case.
First let’s begin by asking why
we would want to directly compute the inverse of a matrix. After all,
one of the first things you’ll learn in any numerical linear algebra class
is to always avoid explicitly inverting a matrix.&lt;/p&gt;

&lt;p&gt;However, in quantum chemistry it’s actually fairly normal to compute
a matrix inverse. In particular, when solving the generalized eigenvalue
problem:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}H\phi = \lambda S \phi.\end{equation}&lt;/script&gt;

&lt;p&gt;We can reduce this generalized eigenvalue problem to the standard eigenvalue
problem using the inverse square root of the overlap matrix:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
S^{-\frac{1}{2}}HS^{-\frac{1}{2}}\phi = \lambda \phi.
\end{equation}&lt;/script&gt;

&lt;p&gt;Performing this calculation is acceptable because we can reuse the inverse
over many scf loops, and because the overlap matrix is usually well conditioned.
In the canonical density matrix purification method of Palser[1] (which
we will probably discuss in more detail later), one also finds the matrix
inverse:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
p_0 = \frac{\lambda}{2}(\mu S^{-1} - S^{-1}HS^{-1}) + \frac{1}{2}S^{-1}
\end{equation}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;p_0&lt;/script&gt; is an initial guess at the density matrix.&lt;/p&gt;

&lt;p&gt;Hotelling’s method is very simple to implement. It works through the
following iteration:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
X_{n+1} = 2X_{n} - X_{n}SX_{n}
\end{equation}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\lim_{n \to \infty} X_n = S^{-1}&lt;/script&gt;. Palser cites the famous Numerical
Recipes book for this method. Disappointingly, it seems that this method
is called “Hotelling’s Method” because it was invented by statistician Harold
Hotelling, and not because it leaves chocolates on your pillows. I’ve seen some
people mention reference [2] as the original paper. Hotelling himself notes that
it was “noticed” in reference [3].&lt;/p&gt;

&lt;p&gt;The condition for convergence is (from [2]) &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\|1 - SX_0 \| &lt; 1 %]]&gt;&lt;/script&gt;. So
how should we pick an initial &lt;script type=&quot;math/tex&quot;&gt;X_0&lt;/script&gt;? One simple way is to just scale the
initial matrix. Consider the eigendecomposition of our initial matrix:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
S = UDU^T.
\end{equation}&lt;/script&gt;

&lt;p&gt;Now let’s plug the decomposition into the convergence condition, with a
scaling value &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\|1 - UDU^T\alpha UDU^T \| &lt; 1.
\end{equation} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\|1 - \alpha DD \| &lt; 1.
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;The effect of multiplying the diagonal matrix of eigenvalues is to square all
the eigenvalues. Hence they are all positive. Thus is &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; is equal
to the inverse of the largest eigenvalue squared, we satisfy the equation.
The largest eigenvalue can be cheaply computed using the power method.&lt;/p&gt;

&lt;p&gt;This is just a simple starting guess that I’ve introduced, there are better ones
out there in the literature, such as the guess in reference [4] which is
specific to overlap matrices (homework question: how can we improve our
&lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; value for overlap matrices?).&lt;/p&gt;

&lt;p&gt;Let’s take a look at a simple implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Libraries&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.sparse.linalg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.sparse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Input Parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sparsity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Initial Matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;density&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sparsity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;csr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Initial Guess&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;largest_eigenvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'LM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return_eigenvectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest_eigenvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Iterate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; \
    &lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;norm_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverse_mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The implementation highlights two further features of this algorithm. First,
the main computational kernel is matrix multiplication, which is great for
high performance computing. Second, it’s trivial to extend to the sparse case
by simply replacing the dense multiplies with sparse multiplies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] Palser, Adam HR, and David E. Manolopoulos. “Canonical purification of the
density matrix in electronic-structure theory.” Physical Review B 58, no. 19
(1998): 12704.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[2] Hotelling, Harold. “Some new methods in matrix calculation.” The Annals
of Mathematical Statistics 14, no. 1 (1943): 1-34.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[3] Frazer, Robert Alexander, William Jolly Duncan, Arthur Roderich Collar,
and A. A. Mullin. “Elementary matrices and some applications to dynamics and
differential equations.” American Journal of Physics 29, no. 8 (1961): 555-556.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[4] Ozaki, T. “Efficient recursion method for inverting an overlap matrix.”
Physical Review B 64, no. 19 (2001): 195110.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I would like to use this first blog post to introduce Hotelling’s method for computing the inverse of a matrix. We’ll focus on the symmetric case. First let’s begin by asking why we would want to directly compute the inverse of a matrix. After all, one of the first things you’ll learn in any numerical linear algebra class is to always avoid explicitly inverting a matrix.</summary></entry><entry><title type="html">Introductory Blog Post</title><link href="http://localhost:4000/blog/2017/08/19/introductory-post.html" rel="alternate" type="text/html" title="Introductory Blog Post" /><published>2017-08-19T17:38:38+09:00</published><updated>2017-08-19T17:38:38+09:00</updated><id>http://localhost:4000/blog/2017/08/19/introductory-post</id><content type="html" xml:base="http://localhost:4000/blog/2017/08/19/introductory-post.html">&lt;p&gt;Welcome to my personal website and blog. I’m not much of a blogger, but I
hope to put some updates on my current projects on to this page. All of
my projects can of course be found at my main &lt;a href=&quot;https://github.com/william-dawson/&quot;&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This page was made with Jekyll, which is of course standard for Github.
I’m excited to get to use all its features including mathematics:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H\Psi = E\Psi&lt;/script&gt;

&lt;p&gt;And source code highlighting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;&lt;span class=&quot;k&quot;&gt;PROGRAM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myprogram&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello Blog Readers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;PROGRAM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, hopefully not too much Fortran…&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to my personal website and blog. I’m not much of a blogger, but I hope to put some updates on my current projects on to this page. All of my projects can of course be found at my main github page.</summary></entry></feed>